# -*- coding: utf-8 -*-
"""Dataset-transform_to_frecords.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12v3mpv9qdMGfHyLU99fYA7eru8j4HpVN

# This code is to make .bin files to .tfrecords

## Mount on your drive to use data stored
"""

from google.colab import drive
drive.mount("/content/drive")

"""## Import required libraries"""

import ntpath
import os
import glob
import struct
import tensorflow as tf # tensorflow 1.14, 2.0.0-alpha, 2.0.0-beta1
from tensorflow.core.example import example_pb2
import argparse

"""### Example generator"""

def example_generator(file):
  
  while True:
    len_bytes = file.read(8)
    if not len_bytes: break # finished reading this file
    str_len = struct.unpack('q', len_bytes)[0]
    example_str = struct.unpack('%ds' % str_len, file.read(str_len))[0]
    yield example_pb2.Example.FromString(example_str)

def art_abs_example(article, abstract):
  
  def _bytes_feature(value):
    """Returns a bytes_list from a string / byte."""
    if isinstance(value, type(tf.constant(0))):
      value = value.numpy() # BytesList won't unpack a string from an EagerTensor.
    return tf.train.Feature(bytes_list=tf.train.BytesList(value=[value.encode()]))

  feature = {
      'article': _bytes_feature(article),
      'abstract': _bytes_feature(abstract)
  }

  return tf.train.Example(features=tf.train.Features(feature=feature))

"""### Main method"""

def make_TFRecords(data_path, new_data_path):
  print("Starting ...")
  if not os.path.exists(new_data_path):
    os.makedirs(new_data_path)
  filelist = glob.glob(data_path+"/**/*.bin", recursive=True) # get the list of datafiles
  assert filelist, "No binary files"
  
  common_path = os.path.commonpath(filelist)
  files = [os.path.splitext(x.replace(common_path, ""))[0]  for x in filelist]
  
  for f, filename in zip(filelist, files):
    try:
      file =  open(f, 'rb')
    except:
      print("Cannot open file : {}".format(f))
      continue
     
    record_file = '{}/{}.tfrecords'.format(new_data_path, filename)
    record_dir = os.path.dirname(record_file)
    if not os.path.exists(record_dir):
      os.makedirs(record_dir)
    with tf.io.TFRecordWriter(record_file) as writer:
      for e in example_generator(file):
        try:
          article_text = e.features.feature['article'].bytes_list.value[0].decode()
          abstract_text = e.features.feature['abstract'].bytes_list.value[0].decode()
          
          tf_example = art_abs_example(article_text, abstract_text)
          writer.write(tf_example.SerializeToString())

        except ValueError:
          tf.logging.error('Failed to get article or abstract from example')
          continue
        if len(article_text) == 0   :
          tf.logging.warning('Found an example with empty article text. Skipping it.')
          
    print("Chunked file {} processed and saved to {}".format(f, record_file))

"""## Use case"""

data_path2 = "/content/"
new_data_path = "tfrecords_folder1"

make_TFRecords(data_path2, new_data_path)

ls $new_data_path

"""# Save files to local"""

from google.colab import files

!zip -r /content/tf.zip /content/tfrecords_folder

files.download('/content/tf.zip')

